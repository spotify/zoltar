<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <parent>
    <artifactId>zoltar-parent</artifactId>
    <groupId>com.spotify</groupId>
    <version>0.5.7-SNAPSHOT</version>
    <relativePath>../../</relativePath>
  </parent>

  <modelVersion>4.0.0</modelVersion>

  <artifactId>apollo-service-example</artifactId>

  <properties>
    <service.mainClass>com.spotify.zoltar.examples.apollo.App</service.mainClass>
    <findbugs.excludeFilterFile>findbugsexclude.xml</findbugs.excludeFilterFile>
    <maven.install.skip>true</maven.install.skip>
    <checkstyle.violationSeverity>warning</checkstyle.violationSeverity>
    <jacoco.skip>true</jacoco.skip>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- #bom_example -->
      <dependency>
        <groupId>com.spotify</groupId>
        <artifactId>zoltar-bom</artifactId>
        <version>0.5.7-SNAPSHOT</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!-- #bom_example -->

      <dependency>
        <groupId>com.spotify</groupId>
        <artifactId>apollo-bom</artifactId>
        <version>1.15.2</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
      </dependency>
      <dependency>
        <groupId>com.google.auto.value</groupId>
        <artifactId>auto-value</artifactId>
      </dependency>
      <dependency>
        <groupId>com.google.auto.value</groupId>
        <artifactId>auto-value-annotations</artifactId>
      </dependency>
      <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-java</artifactId>
      </dependency>
      <dependency>
        <groupId>com.google.code.findbugs</groupId>
        <artifactId>jsr305</artifactId>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
      </dependency>
      <dependency>
        <groupId>joda-time</groupId>
        <artifactId>joda-time</artifactId>
        <version>2.10.5</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>apollo-http-service</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>auto-value-annotations</artifactId>
          <groupId>com.google.auto.value</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>zoltar-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>zoltar-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>zoltar-featran</artifactId>
    </dependency>
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>zoltar-metrics</artifactId>
    </dependency>
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>zoltar-tests</artifactId>
    </dependency>
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>zoltar-tensorflow</artifactId>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>apollo-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>auto-value-annotations</artifactId>
          <groupId>com.google.auto.value</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <version>1.4</version>
        <executions>
          <execution>
            <id>create-revision</id>
            <phase>validate</phase>
            <goals>
              <goal>create</goal>
            </goals>
            <configuration>
              <getRevisionOnlyOnce>true</getRevisionOnlyOnce>
              <doCheck>false</doCheck>
              <doUpdate>false</doUpdate>
              <shortRevisionLength>7</shortRevisionLength>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.8.2</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>service</id>
      <activation>
        <file>
          <exists>SERVICE.marker</exists>
        </file>
      </activation>
      <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>groovy-maven-plugin</artifactId>
            <version>2.0</version>
            <executions>
              <execution>
                <id>root-pom-service-build</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source>
                    log.info(' _____________________________________________  ')
                    log.info('/\\                                            \\ ')
                    log.info('\\_|  == SERVICE marker file detected =======  | ')
                    log.info('  |                                           | ')
                    log.info('  |  -&gt; Assuming service module               | ')
                    log.info('  |  -&gt; Dependencies in target/lib            | ')
                    log.info('  |  -&gt; Runnable jar with classpath manifest  | ')
                    log.info('  |  -&gt; Docker image being built and pushed   | ')
                    log.info('  |  _________________________________________|_')
                    log.info('  \\_/__________________________________________/')
                  </source>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>default</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <useBaseVersion>false</useBaseVersion>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
              <includeScope>runtime</includeScope>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>buildnumber-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>create-timestamp</id>
                <phase>validate</phase>
                <goals>
                  <goal>create-timestamp</goal>
                </goals>
                <configuration>
                  <timezone>UTC</timezone>
                  <timestampFormat>yyyyMMdd'T'HHmmss</timestampFormat>
                  <timestampPropertyName>buildTimestamp</timestampPropertyName>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
              <execution>
                <id>default-jar</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>jar</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <archive>
                <addMavenDescriptor>true</addMavenDescriptor>
                <manifest>
                  <addClasspath>true</addClasspath>
                  <classpathPrefix>lib/</classpathPrefix>
                  <mainClass>${service.mainClass}</mainClass>
                </manifest>
                <manifestEntries>
                  <Implementation-Version>${project.version}-${buildTimestamp}-${buildNumber}</Implementation-Version>
                </manifestEntries>
              </archive>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>